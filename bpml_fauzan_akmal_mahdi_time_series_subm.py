# -*- coding: utf-8 -*-
"""BPML Fauzan Akmal Mahdi - Time Series Subm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mzRFdoEVFyW9pXFxHqo0Aa_0ni1QMHUL
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

path = "D202.csv"
df = pd.read_csv(path)
#df = df.sample(frac=0.03)
#df.reset_index(drop=True, inplace=True)
df

print(df.isnull().sum())

#df = df.sample(frac=0.002)
#df = df.drop([0])
#df = df.drop(columns=['NOTES'])
dates = df['DATE'].values
temp = df['USAGE'].values

plt.figure(figsize=(20,5))
plt.plot(dates, temp)
plt.ylim([0,2.5])
plt.ylabel('Usage')
plt.xlabel('Date')
plt.title('Usage', fontsize=20);

"""Bagi dataset"""

from sklearn.model_selection import train_test_split
x_latih, x_test, y_latih, y_test = train_test_split(temp, dates, test_size = 0.2)

"""Total pembagian data"""

print("Training data: ", len(x_latih))
print("Val data: ", len(x_test))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(x_latih, window_size=60, batch_size=100, shuffle_buffer=1000)
val_set = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=1000)

"""Buat Model"""

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

"""Menghitung MAE (Mean Absolute Error)"""

Mae = (df['USAGE'].max() - df['USAGE'].min()) * 10/100
print(Mae)

"""Penggunaan Callback"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<2.0 and logs.get('val_mae')<2.0):
      print("\nMAE dari model < 10% skala data")
      self.model.stop_training = True
callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, epochs=15, 
                    validation_data = val_set,
                    batch_size=1024,
                    #callbacks=[callbacks]
                    )

"""Plot Akurasi dan Loss

Plot Akurasi
"""

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Akurasi Model')
plt.ylabel('Mae')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()

"""Plot Loss"""

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()